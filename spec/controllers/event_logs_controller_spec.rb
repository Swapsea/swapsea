require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe EventLogsController, type: :controller do
  include Devise::Test::ControllerHelpers
  login_user
  render_views

  before do
    sign_in create :administrator
  end

  # This should return the minimal set of attributes required to create a valid
  # EventLog. As you add validations to EventLog, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    skip('Add a hash of attributes valid for your model')
  }

  let(:invalid_attributes) {
    skip('Add a hash of attributes invalid for your model')
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # EventLogsController. Be sure to keep this updated too.
  let(:valid_session) { FactoryBot.create(:user)  }

  before do
    sign_in create :administrator
  end

  describe 'GET #index' do
    it 'returns a success response' do
      get :index
      expect(response).to be_successful
    end
  end

  describe 'GET #show' do
    it 'returns a success response' do
      event_log = FactoryBot.create(:event_log)
      event_log = create :event_log
      get :show, params: {id: event_log.to_param}
      expect(response).to be_successful
    end
  end

  describe 'GET #new' do
    it 'returns a success response' do
      get :new
      expect(response).to be_successful
    end
  end

  describe 'GET #edit' do
    it 'returns a success response' do
      event_log = FactoryBot.create(:event_log)
      get :edit, params: {id: event_log.to_param}
      expect(response).to be_successful
    end
  end

  describe 'POST #create' do
    context 'with valid params' do
      it 'creates a new EventLog' do
        event_log_attrs = attributes_for :event_log
        expect {
          post :create, params: {event_log: event_log_attrs}
        }.to change(EventLog, :count).by(1)
      end

      it 'redirects to the created event_log' do
        event_log_attrs = attributes_for :event_log
        post :create, params: {event_log: event_log_attrs}
        expect(response).to redirect_to(EventLog.last)
      end
    end
  end

  describe 'DELETE #destroy' do
    it 'destroys the requested event_log' do
      event_log = FactoryBot.create(:event_log)
      expect {
        delete :destroy, params: {id: event_log.to_param}
      }.to change(EventLog, :count).by(-1)
    end

    it 'redirects to the event_logs list' do
      event_log = FactoryBot.create(:event_log)
      delete :destroy, params: {id: event_log.to_param}
      expect(response).to redirect_to(event_logs_url)
    end
  end

end
